package com.cbse.restaurant.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StaffAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStaffAllPropertiesEquals(Staff expected, Staff actual) {
        assertStaffAutoGeneratedPropertiesEquals(expected, actual);
        assertStaffAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStaffAllUpdatablePropertiesEquals(Staff expected, Staff actual) {
        assertStaffUpdatableFieldsEquals(expected, actual);
        assertStaffUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStaffAutoGeneratedPropertiesEquals(Staff expected, Staff actual) {
        assertThat(expected)
            .as("Verify Staff auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStaffUpdatableFieldsEquals(Staff expected, Staff actual) {
        assertThat(expected)
            .as("Verify Staff relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getRole()).as("check role").isEqualTo(actual.getRole()))
            .satisfies(e -> assertThat(e.getJoinDate()).as("check joinDate").isEqualTo(actual.getJoinDate()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStaffUpdatableRelationshipsEquals(Staff expected, Staff actual) {
        assertThat(expected)
            .as("Verify Staff relationships")
            .satisfies(e -> assertThat(e.getManager()).as("check manager").isEqualTo(actual.getManager()));
    }
}
